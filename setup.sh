#!/bin/bash

# ---- repo root check ----
if [ ! -d ".git" ]; then
    echo "Please run this script from the root directory of the dotfiles repository."
    exit 1
fi

# ---- before oh my zsh script building ----

BEFORE_OHMYZSH_PATH="$(pwd)/zsh/before_ohmyzsh.zsh"

echo "# ---- before oh my zsh source in .zshrc (autogenerated by setup script) ----" > "$BEFORE_OHMYZSH_PATH"

ZSH_CUSTOM_PATH="$(pwd)/zsh/zsh_custom"
echo "ZSH_CUSTOM=$ZSH_CUSTOM_PATH" >> "$BEFORE_OHMYZSH_PATH"

echo "export DISABLE_LS_COLORS=true" >> "$BEFORE_OHMYZSH_PATH"

DOTFILES_PATH_EXPORT="export DOTFILES_REPO_ROOT=$(pwd)"
echo "$DOTFILES_PATH_EXPORT" >> "$BEFORE_OHMYZSH_PATH"

ENABLED_PLUGINS="colored-man-pages zsh-ssh git docker"
echo "plugins=($ENABLED_PLUGINS \$plugins)" >> "$BEFORE_OHMYZSH_PATH"

echo 'precmd() { print -n "\033[5 q" }' >> "$BEFORE_OHMYZSH_PATH"

# ---- before oh my zsh file insertion ----

SOURCE_OH_MY_ZSH_LINE="source \$ZSH/oh-my-zsh.sh"
SOURCE_BEFORE_OHMYZSH_LINE="source $BEFORE_OHMYZSH_PATH"

if [[ ! -f "$HOME/.zshrc" ]]; then
    echo "Warning: .zshrc file does not exist. Skipping configuration."
else
    # Insert source before_ohmyzsh.zsh line
    if grep -q "$SOURCE_OH_MY_ZSH_LINE" "$HOME/.zshrc"; then
        if ! grep -q "$SOURCE_BEFORE_OHMYZSH_LINE" "$HOME/.zshrc"; then
            ESCAPED_SOURCE_OH_MY_ZSH_LINE=$(echo "$SOURCE_OH_MY_ZSH_LINE" | sed 's/[\/&]/\\&/g')
            sed -i "/${ESCAPED_SOURCE_OH_MY_ZSH_LINE}/i ${SOURCE_BEFORE_OHMYZSH_LINE}" "$HOME/.zshrc"
            echo "Added source for ${SOURCE_BEFORE_OHMYZSH_LINE} to .zshrc before sourcing oh-my-zsh."
        else
            echo "Source for ${SOURCE_BEFORE_OHMYZSH_LINE} already exists in .zshrc."
        fi
    else
        echo "$SOURCE_OH_MY_ZSH_LINE not found in .zshrc"
    fi
fi

# ---- zsh syntax highlighting ----

SOURCE_LINE="source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
RCFILE="$HOME/.zshrc"

if [[ -f "$RCFILE" ]]; then
    sed -i "\#${SOURCE_LINE}#d" "$RCFILE"
    echo "$SOURCE_LINE" >> "$RCFILE"
    echo "Updated $RCFILE with the syntax-highlighting sourcing line."
else
    echo "Warning: $RCFILE does not exist. Skipping configuration."
fi

# ---- Ensure .config directory exists ----
[ -d "$HOME/.config" ] || mkdir "$HOME/.config"

# ---- Create symlinks for config directories ----
CONFIG_DIRS=("fuzzel" "i3blocks" "kitty" "sway" "alacritty" "eza" "git" "ptpython" "yazi" "tmux" "swaync" "tealdeer" "helix" "macchina" "waybar" "mako")
for config_dir in "${CONFIG_DIRS[@]}"; do
    TARGET="$HOME/.config/$config_dir"
    SOURCE="$(pwd)/$config_dir"
    if [[ -L "$TARGET" && "$(readlink "$TARGET")" != "$SOURCE" ]]; then
        rm "$TARGET"
    fi
    if [[ ! -e "$TARGET" ]]; then
        ln -s "$SOURCE" "$TARGET"
        echo "Created symbolic link for $config_dir."
    else
        echo "Symbolic link for $config_dir already exists."
    fi
done

# ---- wallpapers ----

TARGET="$HOME/.wallpapers"
SOURCE="$(pwd)/wallpapers"

if [[ -L "$TARGET" ]]; then
    if [[ "$(readlink "$TARGET")" == "$SOURCE" ]]; then
        echo "Symbolic link for wallpapers already exists."
    else
        echo "$TARGET exists as a symlink to a different location, skipping."
    fi
elif [[ -e "$TARGET" ]]; then
    echo "$TARGET already exists as a directory, skipping."
else
    ln -s "$SOURCE" "$TARGET"
    echo "Created symbolic link for wallpapers."
fi

# ---- shell completions ----
SCRIPT_PATH="$PWD/zsh/zsh_custom/completions/_gh"
command -v gh >/dev/null 2>&1 && gh completion -s zsh > "$SCRIPT_PATH"

# ---- script symlinks ----

SCRIPTS_DIR="$(pwd)/scripts"
TARGET_DIR="$HOME/.local/bin"

mkdir -p "$TARGET_DIR"

for src in "$SCRIPTS_DIR"/*; do
    [ -f "$src" ] || continue
    [ -x "$src" ] || continue
    script_name="$(basename "$src")"
    target="$TARGET_DIR/$script_name"
    if [ -e "$target" ] || [ -L "$target" ]; then
        if [ -L "$target" ] && [ "$(readlink -- "$target")" = "$src" ]; then
            echo "Symlink for $script_name already exists and is correct. Skipping."
        else
            echo "WARNING: $target already exists and is not the correct symlink. Skipping."
        fi
    else
        ln -s "$src" "$target"
        echo "Created symlink: $target -> $src"
    fi
done
